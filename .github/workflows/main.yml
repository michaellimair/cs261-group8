name: Test, build, and deploy project

on:
  push:
    branches: [ main, feat/infra-setup ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT }}
  MAIN_REGION: ${{ secrets.GCP_MAIN_REGION }}
  SERVICE: ${{ secrets.GCR_SERVICE }}
  STORAGE_BUCKET: ${{ secrets.GCP_BUCKET }}

jobs:
  backend:
    runs-on: ubuntu-latest

    permissions:
      contents: 'read'
      id-token: 'write'

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: postgres
        ports:
        - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
    steps:
    - uses: actions/checkout@v2
    - uses: hashicorp/setup-terraform@v1
    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: '3.9'
    - name: Run test and generate coverage results
      env:
        DB_USER: postgres
        DB_PASSWORD: postgres
        DB_NAME: postgres
        DB_HOST: localhost
        DB_PORT: 5432
      run: |
        cd backend
        python -m pip install --upgrade pipenv wheel
        pipenv install --deploy --dev
        pipenv run coverage run --source='.' manage.py test
        pipenv run coverage xml
    - name: Generate coverage report and check
      if: ${{ github.event_name != 'push' }}
      uses: orgoro/coverage@v2.1
      with:
        coverageFile: ./backend/coverage.xml
        token: ${{ secrets.GITHUB_TOKEN }}
        thresholdAll: 0.9

    - name: Initialize Terraform
      run: terraform init

    - name: Validate Terraform configuration
      run: terraform validate -no-color

    - name: Authenticate to Google Cloud Platform
      uses: 'google-github-actions/auth@v0'
      with:
        credentials_json: '${{ secrets.GCP_SA_KEY }}'

    - name: 'Set up Cloud SDK'
      uses: 'google-github-actions/setup-gcloud@v0'

    - name: Authorize Docker push
      run: gcloud auth configure-docker

    - name: Build and Push Container
      if: ${{ github.event_name == 'push' }}
      run: |-
        docker build -t gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE }}:${{ github.sha }} backend/
        docker push gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE }}:${{ github.sha }}

    - name: Apply Terraform
      if: ${{ github.event_name == 'push' }}
      run: terraform apply -auto-approve
      env:
        GOOGLE_CREDENTIALS: ${{ secrets.GCP_SA_KEY }}
        TF_VAR_project_id: ${{ env.PROJECT_ID }}
        TF_VAR_bucket_name: ${{ env.STORAGE_BUCKET }}
        TF_VAR_cloud_run_main_service: ${{ env.SERVICE }}

    - name: Deploy to Cloud Run
      if: ${{ github.event_name == 'push' }}
      uses: 'google-github-actions/deploy-cloudrun@v0'
      with:
        service: '${{ env.SERVICE }}}'
        image: 'gcr.io/${{ env.PROJECT_ID }}/${{ env.SERVICE }}}'
        region: '${{ env.MAIN_REGION }}'

    - name: Show Output of Deployment
      if: ${{ github.event_name == 'push' }}
      run: echo ${{ steps.deploy.outputs.url }}

  frontend:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Node.js version 14
      uses: actions/setup-node@v2
      with:
        node-version: '14'
    - name: Install frontend dependencies
      run: |
        cd frontend
        yarn
    - name: Run tests with Jest
      run: |
        cd frontend
        yarn test
    - name: Check frontend code coverage
      uses: ArtiomTr/jest-coverage-report-action@v2.0-rc.6
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        threshold: 90 # Require at least 90% code coverage
        working-directory: 'frontend'
        annotations: none
        skip-step: install
        test-script: "yarn test --silent --ci --coverage --coverageReporters=\"text\" --coverageReporters=\"text-summary\" --watchAll=false"
